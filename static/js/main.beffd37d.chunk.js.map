{"version":3,"sources":["App.js","index.js","../external \"window.tf\""],"names":["modelPromise","tf","vocabularyPromise","fetch","then","response","json","tokenizerPromise","Promise","resolve","kuromoji","builder","dicPath","build","_","tokenizer","inference","words","a","model","vocabulary","layers","getWeights","transpose","array","weight","map","word","tokenize","text","basic_form","filter","countWords","count","Object","entries","dimensionalityReduction","inputData","TSNE","dim","perplexity","earlyExaggeration","learningRate","nIter","metric","init","data","type","run","getOutputScaled","clustering","numClusters","skmeans","idxs","improveLayout","d3","force","strength","radius","r","iterations","tick","stop","visualize","minR","maxR","console","time","timeEnd","wordVector","xy","groups","rScale","domain","range","forEach","i","x","x0","y","y0","group","optimalFontSize","fontFamily","fontWeight","document","createElementNS","textContent","setAttributeNS","svg","appendChild","body","ok","ng","iter","m","getBBox","width","height","Math","sqrt","removeChild","Chart","svgRef","margin","scale","contentSize","max","abs","min","color","ref","className","viewBox","transform","key","fill","fontSize","textAnchor","dominantBaseline","App","useRef","useState","setWords","defaultText","useEffect","onSubmit","event","preventDefault","target","elements","value","name","defaultValue","onClick","current","SVGConverter","loadFromElement","converter","anchor","createElement","download","href","pngDataURL","click","rel","render","getElementById","module","exports","window"],"mappings":"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","file":"static/js/main.beffd37d.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport kuromoji from \"kuromoji\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport TSNE from \"tsne-js\";\nimport skmeans from \"skmeans\";\nimport * as d3 from \"d3\";\nimport { SVGConverter } from \"svg-dataurl\";\n\nconst modelPromise = tf.loadLayersModel(\"word2vec/model.json\");\nconst vocabularyPromise = fetch(\"vocabulary.json\").then((response) =>\n  response.json(),\n);\nconst tokenizerPromise = new Promise((resolve) => {\n  kuromoji.builder({ dicPath: \"dict\" }).build((_, tokenizer) => {\n    resolve(tokenizer);\n  });\n});\n\nconst inference = async (words) => {\n  const model = await modelPromise;\n  const vocabulary = await vocabularyPromise;\n  const weight = await model.layers[3].getWeights()[0].transpose().array();\n  return words.map(({ word }) => weight[vocabulary[word]]);\n};\n\nconst tokenize = async (text) => {\n  const tokenizer = await tokenizerPromise;\n  const vocabulary = await vocabularyPromise;\n  return tokenizer\n    .tokenize(text)\n    .map(({ basic_form }) => basic_form)\n    .filter((word) => word in vocabulary);\n};\n\nconst countWords = (words) => {\n  const count = {};\n  for (const word of words) {\n    if (!(word in count)) {\n      count[word] = 0;\n    }\n    count[word] += 1;\n  }\n  return Object.entries(count).map(([word, count]) => ({ word, count }));\n};\n\nconst dimensionalityReduction = (inputData) => {\n  const model = new TSNE({\n    dim: 2,\n    perplexity: 30.0,\n    earlyExaggeration: 4.0,\n    learningRate: 100.0,\n    nIter: 200,\n    metric: \"euclidean\",\n  });\n  model.init({\n    data: inputData,\n    type: \"dense\",\n  });\n  model.run();\n  return model.getOutputScaled();\n};\n\nconst clustering = (inputData, numClusters) => {\n  return skmeans(inputData, numClusters).idxs;\n};\n\nconst improveLayout = (words) => {\n  const simulation = d3\n    .forceSimulation(words)\n    .force(\"charge\", d3.forceManyBody().strength(10))\n    .force(\n      \"collide\",\n      d3\n        .forceCollide()\n        .radius(({ r }) => r + 1)\n        .iterations(30),\n    )\n    .force(\"x\", d3.forceX(0))\n    .force(\"y\", d3.forceY(0));\n  simulation.tick(100).stop();\n};\n\nconst visualize = async (text, { numClusters, minR, maxR }) => {\n  console.time(\"preprocess\");\n  const words = countWords(await tokenize(text));\n  console.timeEnd(\"preprocess\");\n  console.time(\"inference\");\n  const wordVector = await inference(words);\n  console.timeEnd(\"inference\");\n  console.time(\"dimensionalityReduction\");\n  const xy = dimensionalityReduction(wordVector);\n  console.timeEnd(\"dimensionalityReduction\");\n  console.time(\"clustering\");\n  const groups = clustering(xy, numClusters);\n  console.timeEnd(\"clustering\");\n\n  const rScale = d3\n    .scaleSqrt()\n    .domain(d3.extent(words, ({ count }) => count))\n    .range([minR, maxR]);\n  words.forEach((word, i) => {\n    word.x = word.x0 = xy[i][0] * 600;\n    word.y = word.y0 = xy[i][1] * 600;\n    word.group = groups[i];\n    word.r = rScale(word.count);\n  });\n  console.time(\"improveLayout\");\n  improveLayout(words);\n  console.timeEnd(\"improveLayout\");\n  return words;\n};\n\nconst optimalFontSize = (word, r, fontFamily, fontWeight) => {\n  const text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n  text.textContent = word;\n  text.setAttributeNS(null, \"font-family\", fontFamily);\n  text.setAttributeNS(null, \"font-weight\", fontWeight);\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  svg.appendChild(text);\n  document.body.appendChild(svg);\n  let ok = 0;\n  let ng = 100;\n  for (let iter = 0; iter < 10; ++iter) {\n    let m = (ok + ng) / 2;\n    text.setAttributeNS(null, \"font-size\", m);\n    const { width, height } = text.getBBox();\n    const d = Math.sqrt(width ** 2 + height ** 2) / 2;\n    if (d <= r) {\n      ok = m;\n    } else {\n      ng = m;\n    }\n  }\n  document.body.removeChild(svg);\n  return ok;\n};\n\nconst Chart = ({ words, svgRef }) => {\n  const contentSize = 600;\n  const margin = {\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 10,\n  };\n  const width = contentSize + margin.left + margin.right;\n  const height = contentSize + margin.top + margin.bottom;\n  const fontFamily = `'Sawarabi Gothic', sans-serif`;\n  const fontWeight = \"normal\";\n\n  const scale =\n    contentSize /\n    2 /\n    Math.max(\n      ...[\n        Math.abs(Math.min(...words.map(({ x, r }) => x - r))),\n        Math.abs(Math.max(...words.map(({ x, r }) => x + r))),\n        Math.abs(Math.min(...words.map(({ y, r }) => y - r))),\n        Math.abs(Math.max(...words.map(({ y, r }) => y + r))),\n      ],\n    );\n  const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n  return (\n    <svg ref={svgRef} className=\"chart\" viewBox={`0 0 ${width} ${height}`}>\n      <g transform={`translate(${margin.left},${margin.top})`}>\n        <g transform={`translate(${contentSize / 2},${contentSize / 2})`}>\n          {words.map((word) => {\n            return (\n              <g\n                key={word.word}\n                transform={`translate(${word.x * scale},${\n                  word.y * scale\n                })scale(${scale})`}\n              >\n                <circle r={word.r} fill={color(word.group)} />\n                <text\n                  fill=\"ghostwhite\"\n                  fontSize={optimalFontSize(word.word, word.r)}\n                  fontFamily={fontFamily}\n                  fontWeight={fontWeight}\n                  textAnchor=\"middle\"\n                  dominantBaseline=\"central\"\n                >\n                  {word.word}\n                </text>\n              </g>\n            );\n          })}\n        </g>\n      </g>\n    </svg>\n  );\n};\n\nexport const App = () => {\n  const svgRef = useRef();\n  const [words, setWords] = useState([]);\n  const defaultText = `日本国民は、正当に選挙された国会における代表者を通じて行動し、われらとわれらの子孫のために、諸国民との協和による成果と、わが国全土にわたつて自由のもたらす恵沢を確保し、政府の行為によつて再び戦争の惨禍が起ることのないやうにすることを決意し、ここに主権が国民に存することを宣言し、この憲法を確定する。そもそも国政は、国民の厳粛な信託によるものであつて、その権威は国民に由来し、その権力は国民の代表者がこれを行使し、その福利は国民がこれを享受する。これは人類普遍の原理であり、この憲法は、かかる原理に基くものである。われらは、これに反する一切の憲法、法令及び詔勅を排除する。\n　日本国民は、恒久の平和を念願し、人間相互の関係を支配する崇高な理想を深く自覚するのであつて、平和を愛する諸国民の公正と信義に信頼して、われらの安全と生存を保持しようと決意した。われらは、平和を維持し、専制と隷従、圧迫と偏狭を地上から永遠に除去しようと努めてゐる国際社会において、名誉ある地位を占めたいと思ふ。われらは、全世界の国民が、ひとしく恐怖と欠乏から免かれ、平和のうちに生存する権利を有することを確認する。\n\nわれらは、いづれの国家も、自国のことのみに専念して他国を無視してはならないのであつて、政治道徳の法則は、普遍的なものであり、この法則に従ふことは、自国の主権を維持し、他国と対等関係に立たうとする各国の責務であると信ずる。\n\n日本国民は、国家の名誉にかけ、全力をあげてこの崇高な理想と目的を達成することを誓ふ。`;\n  const defaultNumClusters = 5;\n  const defaultMinR = 6;\n  const defaultMaxR = 30;\n  useEffect(() => {\n    (async () => {\n      setWords(\n        await visualize(defaultText, {\n          minR: defaultMinR,\n          maxR: defaultMaxR,\n          numClusters: defaultNumClusters,\n        }),\n      );\n    })();\n  }, [defaultText, defaultNumClusters]);\n\n  return (\n    <div>\n      <section className=\"hero is-dark\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">Semantic Preserving Word Bubbles</h1>\n            <h2 className=\"subtitle\">\n              As an Alternative to WordClouds for Text Visualization\n            </h2>\n          </div>\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"container\">\n          <form\n            onSubmit={async (event) => {\n              event.preventDefault();\n              const text = event.target.elements.text.value;\n              const numClusters = +event.target.elements.numClusters.value;\n              const minR = +event.target.elements.minR.value;\n              const maxR = +event.target.elements.maxR.value;\n              setWords(await visualize(text, { numClusters, minR, maxR }));\n            }}\n          >\n            <div className=\"field\">\n              <label className=\"label\">Input Text</label>\n              <div className=\"control\">\n                <textarea\n                  name=\"text\"\n                  className=\"textarea\"\n                  defaultValue={defaultText}\n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Number of Clusters</label>\n              <div className=\"control\">\n                <input\n                  name=\"numClusters\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"10\"\n                  defaultValue={defaultNumClusters}\n                  className=\"input\"\n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Minimum Radius</label>\n              <div className=\"control\">\n                <input\n                  name=\"minR\"\n                  type=\"number\"\n                  min=\"0\"\n                  defaultValue={defaultMinR}\n                  className=\"input\"\n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <label className=\"label\">Maximum Radius</label>\n              <div className=\"control\">\n                <input\n                  name=\"maxR\"\n                  type=\"number\"\n                  min=\"0\"\n                  defaultValue={defaultMaxR}\n                  className=\"input\"\n                />\n              </div>\n            </div>\n            <div className=\"field\">\n              <div className=\"control\">\n                <button className=\"button is-dark\" type=\"submit\">\n                  Visualize\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"container\">\n          <div className=\"field\">\n            <Chart words={words} svgRef={svgRef} />\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <button\n                className=\"button is-dark\"\n                onClick={async () => {\n                  const svg = svgRef.current;\n                  const converter = await SVGConverter.loadFromElement(svg);\n                  const anchor = document.createElement(\"a\");\n                  anchor.download = \"wordbubble.png\";\n                  anchor.href = converter.pngDataURL();\n                  document.body.appendChild(anchor);\n                  anchor.click();\n                  document.body.removeChild(anchor);\n                }}\n              >\n                Save Image\n              </button>\n            </div>\n          </div>\n        </div>\n      </section>\n      <footer className=\"footer\">\n        <div className=\"content has-text-centered\">\n          <p>\n            <a\n              href=\"https://github.com/likr-sandbox/wordbubble\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              view source code\n            </a>\n          </p>\n          <p>&copy; 2020 Yosuke Onoue</p>\n        </div>\n      </footer>\n    </div>\n  );\n};\n","import \"bulma/css/bulma.css\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { App } from \"./App\";\n\nrender(<App />, document.getElementById(\"content\"));\n","module.exports = window.tf;"],"sourceRoot":""}